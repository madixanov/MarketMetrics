from aiogram import Router, types
from aiogram.filters import Command
from keyboards import (
    uzum_categories_keyboard,
    yandex_categories_keyboard,
    uzum_products_keyboard,
    uzum_product_details_keyboard
)
from scrapers import get_uzum_categories, get_uzum_products
from .start import program_start
from selenium.common.exceptions import TimeoutException
import hashlib

market_router = Router()

# ==============================
# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
# ==============================
PAGE_SIZE = 6  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
PRODUCTS_PAGE_SIZE = 6  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ

# ==============================
# –ö—ç—à–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
# ==============================
categories_cache = {}  # {chat_id: categories}
products_cache = {}    # {chat_id: products}


# ==============================
# –ö–æ–º–∞–Ω–¥–∞ /uzum
# ==============================
@market_router.message(Command("uzum"))
async def market_uzum(message: types.Message):
    chat_id = message.chat.id
    loading_msg = await message.answer("–û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏... ‚è≥")
    
    try:
        categories = get_uzum_categories("https://uzum.uz/ru")
        categories_cache[chat_id] = categories  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –∫—ç—à
        await loading_msg.delete()
    except TimeoutException:
        await loading_msg.delete()
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ üò¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    text = (
        "üõç –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ **Uzum Market**!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤. ‚¨áÔ∏è\n\n"
        "üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ ‚Äî —ç—Ç–æ –±—ã—Å—Ç—Ä–µ–µ –∏ —É–¥–æ–±–Ω–µ–µ!"
    )

    await message.answer(
        text,
        reply_markup=uzum_categories_keyboard(categories, page=0),
        parse_mode="Markdown"
    )


# ==============================
# –ü–∞–≥–∏–Ω–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
# ==============================
@market_router.callback_query(lambda c: c.data.startswith("uzum_page_"))
async def uzum_categories_pagination(callback: types.CallbackQuery):
    await callback.answer()
    chat_id = callback.message.chat.id
    page = int(callback.data.split("_")[-1])
    
    categories = categories_cache.get(chat_id)
    if not categories:
        await callback.message.edit_text(
            "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã üò¢\n–ù–∞–∂–º–∏—Ç–µ /uzum —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å."
        )
        return

    await callback.message.edit_text(
        "üõç –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é ‚¨áÔ∏è",
        parse_mode="Markdown",
        reply_markup=uzum_categories_keyboard(categories, page)
    )


# ==============================
# –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
# ==============================
# ==============================
# –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ (–∫–Ω–æ–ø–∫–∏, –±–µ–∑ —Ç–µ–∫—Å—Ç–∞)
# ==============================
@market_router.callback_query(lambda c: c.data.startswith("uzum_"))
async def uzum_category_callback(callback: types.CallbackQuery):
    await callback.answer()
    chat_id = callback.message.chat.id

    category_hash = callback.data.split("_")[1]
    categories = categories_cache.get(chat_id, [])
    category = next(
        (c for c in categories if hashlib.md5(c["title"].encode()).hexdigest()[:8] == category_hash),
        None
    )

    if not category:
        await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é.")
        return

    loading_msg = await callback.message.answer(f"‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category['title']}...")
    products = get_uzum_products(category["url"])
    await loading_msg.delete()

    if not products:
        await callback.message.answer("–ü–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ üò¢")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –∫—ç—à
    products_cache[chat_id] = products

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ: —Ç–µ–∫—Å—Ç –Ω–µ–±–æ–ª—å—à–æ–π, –∫–Ω–æ–ø–∫–∏ ‚Äî —Ç–æ–≤–∞—Ä—ã
    await callback.message.edit_text(
        f"üõí –¢–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ **{category['title']}**. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä ‚¨áÔ∏è",
        parse_mode="Markdown",
        reply_markup=uzum_products_keyboard(products, page=0)
    )


# ==============================
# –ü–∞–≥–∏–Ω–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤
# ==============================
@market_router.callback_query(lambda c: c.data.startswith("products_page_"))
async def uzum_products_pagination(callback: types.CallbackQuery):
    await callback.answer()
    chat_id = callback.message.chat.id
    page = int(callback.data.split("_")[-1])

    products = products_cache.get(chat_id)
    if not products:
        await callback.message.answer("–¢–æ–≤–∞—Ä—ã –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã üò¢")
        return

    start = page * PRODUCTS_PAGE_SIZE
    end = start + PRODUCTS_PAGE_SIZE
    text = "üõí –¢–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n\n"
    for p in products[start:end]:
        text += f"‚Ä¢ {p['title']} ‚Äî {p['price']}\n"

    await callback.message.edit_text(
        text,
        parse_mode="Markdown",
        reply_markup=uzum_products_keyboard(products, page)
    )

@market_router.callback_query(lambda c: c.data.startswith("back_to_categories"))
async def back_to_categories(callback: types.CallbackQuery):
    if callback.message:
        await callback.message.delete()
    await callback.answer()
    await market_uzum(callback.message)

@market_router.callback_query(lambda c: c.data.startswith("product_"))
async def product_detail_callback(callback: types.CallbackQuery):
    await callback.answer()
    chat_id = callback.message.chat.id
    products = products_cache.get(chat_id)
    if not products:
        await callback.message.answer("–¢–æ–≤–∞—Ä—ã –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã üò¢")
        return

    index = int(callback.data.split("_")[1])
    if index >= len(products):
        await callback.message.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω üò¢")
        return

    product = products[index]
    text = (
        f"‚ú®üõç **{product['title']}** ‚ú®\n\n"
        f"üí∞ –¶–µ–Ω–∞: **{product['price']}**\n"
        f"üìÖ –†–∞—Å—Å—Ä–æ—á–∫–∞: *{product['price_per_month']}* –≤ –º–µ—Å—è—Ü\n"
        f"üîó [–û—Ç–∫—Ä—ã—Ç—å –≤ Uzum]({product['url']})"
    )

    await callback.message.answer(text, parse_mode="Markdown", reply_markup=uzum_product_details_keyboard(product))

@market_router.callback_query(lambda c: c.data.startswith("back_to_products"))
async def back_to_products(callback: types.CallbackQuery):
    if callback.message:
        await callback.message.delete()
    await callback.answer()


# ==============================
# –í—ã–±–æ—Ä –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞
# ==============================
@market_router.callback_query(lambda c: c.data.startswith("market_"))
async def callback_market(callback: types.CallbackQuery):
    await callback.answer()
    if callback.message:
        await callback.message.delete()

    if callback.data == "market_uzum":
        await market_uzum(callback.message)
    elif callback.data == "market_yandex":
        await callback.message.answer(
            "üü® Yandex Market –ø–æ–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ üõ†Ô∏è\n\n"
            "–°–∫–æ—Ä–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –Ω–∞—Ö–æ–¥–∏—Ç—å –ª—É—á—à–∏–µ —Ç–æ–≤–∞—Ä—ã –∑–¥–µ—Å—å! üîú‚ú®",
            reply_markup=yandex_categories_keyboard()
        )


# ==============================
# –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
# ==============================
@market_router.callback_query(lambda c: c.data == "back_home")
async def callback_back_home(callback: types.CallbackQuery):
    await callback.answer()
    await program_start(callback.message)

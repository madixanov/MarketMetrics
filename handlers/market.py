from aiogram import Router, types
from aiogram.filters import Command
from keyboards import (
    uzum_categories_keyboard,
    uzum_products_keyboard,
    product_details_keyboard,
    yandex_categories_keyboard,
    yandex_products_keyboard,
    uzum_top_selling_keyboard
    )
from scrapers import (
    get_uzum_categories, 
    get_uzum_products, 
    get_uzum_top_selling,
    get_yandex_categories,
    get_yandex_products
    )
from .start import program_start
from selenium.common.exceptions import TimeoutException
import hashlib

market_router = Router()

# ==============================
# Constants
# ==============================
PAGE_SIZE = 6  
PRODUCTS_PAGE_SIZE = 6  

# ==============================
# Caches for users
# ==============================
categories_cache = {} 
products_cache = {}   


# ==============================
# Command /uzum
# ==============================
@market_router.message(Command("uzum"))
async def market_uzum(message: types.Message):
    chat_id = message.chat.id
    loading_msg = await message.answer("–û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏... ‚è≥")
    
    try:
        categories = get_uzum_categories("https://uzum.uz/ru")
        categories_cache[chat_id] = categories
        await loading_msg.delete()
    except TimeoutException:
        await loading_msg.delete()
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ üò¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    text = (
        "üõç –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ üçá **Uzum Market**!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤. ‚¨áÔ∏è\n\n"
        "üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ ‚Äî —ç—Ç–æ –±—ã—Å—Ç—Ä–µ–µ –∏ —É–¥–æ–±–Ω–µ–µ!"
    )

    await message.answer(
        text,
        reply_markup=uzum_categories_keyboard(categories, page=0),
        parse_mode="Markdown"
    )


# ==============================
# Category pagination
# ==============================
@market_router.callback_query(lambda c: c.data.startswith("uzum_page_"))
async def uzum_categories_pagination(callback: types.CallbackQuery):
    await callback.answer()
    chat_id = callback.message.chat.id
    page = int(callback.data.split("_")[-1])
    
    categories = categories_cache.get(chat_id)
    if not categories:
        await callback.message.edit_text(
            "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã üò¢\n–ù–∞–∂–º–∏—Ç–µ /uzum —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å."
        )
        return

    await callback.message.edit_text(
        "üõç –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é ‚¨áÔ∏è",
        parse_mode="Markdown",
        reply_markup=uzum_categories_keyboard(categories, page)
    )


# =======================================
# Category selection and showing products
# =======================================
@market_router.callback_query(lambda c: c.data.startswith("uzum_"))
async def uzum_category_callback(callback: types.CallbackQuery):
    await callback.answer()
    chat_id = callback.message.chat.id

    category_hash = callback.data.split("_")[1]
    categories = categories_cache.get(chat_id, [])
    category = next(
        (c for c in categories if hashlib.md5(c["title"].encode()).hexdigest()[:8] == category_hash),
        None
    )

    if not category:
        await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é.")
        return

    loading_msg = await callback.message.answer(f"‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category['title']}...")
    products = get_uzum_products(category["url"])
    await loading_msg.delete()

    if not products:
        await callback.message.answer("–ü–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ üò¢")
        return

    products_cache[chat_id] = products

    await callback.message.edit_text(
        f"üõí –¢–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ **{category['title'].replace('.', '\\.')}**\\. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä ‚¨áÔ∏è",
        parse_mode="MarkdownV2",
        reply_markup=uzum_products_keyboard(products, page=0, category_url = category['url'].replace("https://uzum.uz/ru/category/", ""))
    )


# ==============================
# Products pagintaion
# ==============================
@market_router.callback_query(lambda c: c.data.startswith("products_page_"))
async def uzum_products_pagination(callback: types.CallbackQuery):
    await callback.answer()
    chat_id = callback.message.chat.id
    page = int(callback.data.split("_")[-1])

    products = products_cache.get(chat_id)
    if not products:
        await callback.message.answer("–¢–æ–≤–∞—Ä—ã –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã üò¢")
        return

    text = "üõí –¢–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n\n"

    await callback.message.edit_text(
        text,
        parse_mode="Markdown",
        reply_markup=uzum_products_keyboard(products, page)
    )


@market_router.callback_query(lambda c: c.data.startswith("top_"))
async def top_selling_uzum(callback: types.CallbackQuery):
    await callback.answer()
    chat_id = callback.message.chat.id

    category_link = callback.data.replace("top_", "")

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    loading_msg = await callback.message.answer("‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–∞–º—ã–µ –ø—Ä–æ–¥–∞–≤–∞–µ–º—ã–µ —Ç–æ–≤–∞—Ä—ã —Å Uzum...")

    try:
        # –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞
        products = get_uzum_top_selling(f"https://uzum.uz/ru/category/{category_link}")
    except Exception as e:
        await loading_msg.delete()
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤: {e}")
        return

    await loading_msg.delete()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if not products:
        await callback.message.answer("üò¢ –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–æ–ø-–ø—Ä–æ–¥–∞–≤–∞–µ–º—ã–µ —Ç–æ–≤–∞—Ä—ã.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç (–¥–æ 10 —Ç–æ–≤–∞—Ä–æ–≤)
    text = "üî• **–¢–æ–ø-–ø—Ä–æ–¥–∞–≤–∞–µ–º—ã–µ —Ç–æ–≤–∞—Ä—ã Uzum:**\n\n"
    await callback.message.answer(text, parse_mode="Markdown", reply_markup=uzum_top_selling_keyboard(products, page=0))    

# ===========================
# Button "Back to categories"
# ===========================
@market_router.callback_query(lambda c: c.data.startswith("back_to_categories"))
async def back_to_categories(callback: types.CallbackQuery):
    if callback.message:
        await callback.message.delete()
    await callback.answer()
    await market_uzum(callback.message)


# ===============
# Product Details
# ===============
@market_router.callback_query(lambda c: c.data.startswith("product_"))
async def product_detail_callback(callback: types.CallbackQuery):
    await callback.answer()
    chat_id = callback.message.chat.id
    products = products_cache.get(chat_id)
    if not products:
        await callback.message.answer("–¢–æ–≤–∞—Ä—ã –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã üò¢")
        return

    index = int(callback.data.split("_")[-1])
    if index >= len(products):
        await callback.message.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω üò¢")
        return

    product = products[index]
    text = (
        f"‚ú®üõç **{product['title']}** ‚ú®\n\n"
        f"üí∞ –¶–µ–Ω–∞: **{product['price']} —Å—É–º**\n"
        f"üìÖ –†–∞—Å—Å—Ä–æ—á–∫–∞: *{product['price_per_month']}* –≤ –º–µ—Å—è—Ü\n"
        f"üîó [–û—Ç–∫—Ä—ã—Ç—å –≤ Uzum]({product['url']})"
    )

    await callback.message.answer(text, parse_mode="Markdown", reply_markup=product_details_keyboard(product))

@market_router.callback_query(lambda c: c.data.startswith("yandex_product_"))
async def yandex_product_detail_callback(callback: types.CallbackQuery):
    await callback.answer()
    chat_id = callback.message.chat.id
    products = products_cache.get(chat_id)
    if not products:
        await callback.message.answer("–¢–æ–≤–∞—Ä—ã –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã üò¢")
        return

    index = int(callback.data.split("_")[-1])
    if index >= len(products):
        await callback.message.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω üò¢")
        return

    product = products[index]
    text = (
        f"‚ú®üõç **{product['title']}** ‚ú®\n\n"
        f"üí∞ –¶–µ–Ω–∞: **{product['price']} —Å—É–º**\n"
        f"üìÖ –û—Ü–µ–Ω–∫–∞ : *{product['rating']}*\n"
        f"üîó [–û—Ç–∫—Ä—ã—Ç—å –≤ Yandex]({product['url']})"
    )

    await callback.message.answer(text, parse_mode="Markdown", reply_markup=product_details_keyboard(product))


# =========================
# Button "Back to products"
# =========================
@market_router.callback_query(lambda c: c.data.startswith("back_to_products"))
async def back_to_products(callback: types.CallbackQuery):
    if callback.message:
        await callback.message.delete()
    await callback.answer()


# ==============================
# Command /yandex
# ==============================
@market_router.message(Command("yandex"))
async def market_yandex(message: types.Message):
    chat_id = message.chat.id
    loading_msg = await message.answer("–û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏... ‚è≥")

    try:
        categories = get_yandex_categories("https://market.yandex.uz/")
        categories_cache[chat_id] = categories
        await loading_msg.delete()
    except TimeoutException:
        await loading_msg.delete()
        await message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã üò¢\n–ù–∞–∂–º–∏—Ç–µ /yandex —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å.")
        return

    text = (
        "üõç –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ üü® **Yandex Market**!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤. ‚¨áÔ∏è\n\n"
        "üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ ‚Äî —ç—Ç–æ –±—ã—Å—Ç—Ä–µ–µ –∏ —É–¥–æ–±–Ω–µ–µ!"
    )

    await message.answer(
        text,
        reply_markup=yandex_categories_keyboard(categories, page=0),
        parse_mode="Markdown"
    )


@market_router.callback_query(lambda c: c.data.startswith("yandex_page_"))
async def yandex_categories_pagination(callback: types.CallbackQuery):
    await callback.answer()
    chat_id = callback.message.chat.id
    page = int(callback.data.split("_")[-1])

    categories = categories_cache.get(chat_id)
    if not categories:
        await callback.message.edit_text(
            "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã üò¢\n–ù–∞–∂–º–∏—Ç–µ /yandex —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å."
        )
        return

    await callback.message.edit_text(
        "üõç –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é ‚¨áÔ∏è",
        parse_mode="Markdown",
        reply_markup=yandex_categories_keyboard(categories, page)
    )


# =======================================
# Category selection and showing products
# =======================================
@market_router.callback_query(lambda c: c.data.startswith("yandex_") and not c.data.startswith(("yandex_product_", "yandex_products_page_")))
async def yandex_category_callback(callback: types.CallbackQuery):
    await callback.answer()
    chat_id = callback.message.chat.id

    category_hash = callback.data.split("_")[-1]
    categories = categories_cache.get(chat_id, [])
    category = next(
        (c for c in categories if hashlib.md5(c["title"].encode()).hexdigest()[:8] == category_hash),
        None
    )

    if not category:
        await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é.")
        return

    loading_msg = await callback.message.answer(f"‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ **{category['title']}...**", parse_mode="Markdown",)
    products = get_yandex_products(category["url"])
    await loading_msg.delete()

    if not products:
        await callback.message.answer("–ü–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ üò¢")
        return

    products_cache[chat_id] = products

    await callback.message.edit_text(
        f"üõí –¢–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ **{category['title'].replace('.', '\\.')}**\\. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä ‚¨áÔ∏è",
        parse_mode="MarkdownV2",
        reply_markup=yandex_products_keyboard(products, page=0)
    )


@market_router.callback_query(lambda c: c.data.startswith("yandex_products_page_"))
async def yandex_products_pagination(callback: types.CallbackQuery):
    await callback.answer()
    chat_id = callback.message.chat.id
    page = int(callback.data.split("_")[-1])

    products = products_cache.get(chat_id)
    if not products:
        await callback.message.answer("–¢–æ–≤–∞—Ä—ã –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã üò¢")
        return

    text = "üõí –¢–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n\n"

    await callback.message.edit_text(
        text,
        parse_mode="Markdown",
        reply_markup=yandex_products_keyboard(products, page)
    )


# ==============================
# Choosing marketplace
# ==============================
@market_router.callback_query(lambda c: c.data.startswith("market_"))
async def callback_market(callback: types.CallbackQuery):
    await callback.answer()
    if callback.message:
        await callback.message.delete()

    if callback.data == "market_uzum":
        await market_uzum(callback.message)
    elif callback.data == "market_yandex":
        await market_yandex(callback.message)


# ==============================
# Button "Back"
# ==============================
@market_router.callback_query(lambda c: c.data == "back_home")
async def callback_back_home(callback: types.CallbackQuery):
    await callback.answer()
    await program_start(callback.message)
